#While raing a pull request on the main or devops branch, it will test the code
# Generate the report if its success then create a image and push to ACR
name: Building docker image and pushing to ACR on main branch pull request

on:
  pull_request:
    types: [opened, reopened]
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # - name: Checkout the code
    #   uses: actions/checkout@v3
    - name: pringing
      run: echo "Image build on the main branch pull request"

    # - name: Set up JDK 18
    #   uses: actions/setup-java@v3
    #   with:
    #     distribution: 'temurin'
    #     java-version: '18'
    
    # - name: Cache Maven packages
    #   uses: actions/cache@v3
    #   with:
    #     path: ~/.m2/repository
    #     key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
    #     restore-keys: ${{ runner.os }}-maven-
        
    # # - name: Build Maven project
    # #   run: mvn clean install -DskipTests

    # - name: Extract application version and artifactId from pom.xml
    #   id: extract_version
    #   run: |
    #     version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
    #     echo "version=$version" >> $GITHUB_ENV
    #     artifactId=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)
    #     echo "artifactId=$artifactId" >> $GITHUB_ENV

    # - name: Set up Docker Buildx
    #   uses: docker/setup-buildx-action@v2

    # # - name: Log in to Azure Container Registry
    # #   run: echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ vars.ACR_NAME }}.azurecr.io -u ${{ vars.ACR_USERNAME }} --password-stdin

    # # - name: Build and push Docker image
    # #   run: |
    # #     docker build -t ${{ vars.ACR_NAME }}.azurecr.io/${{ env.artifactId }}:${{ env.version }} .
    # #     docker push ${{ vars.ACR_NAME }}.azurecr.io/${{ env.artifactId }}:${{ env.version }}

    # # - name: Log out from Azure Container Registry
    # #   run: docker logout ${{ vars.ACR_NAME }}.azurecr.io

    # - name: Increment version
    #   id: increment_version
    #   run: |
    #     current_version=${{ env.version }}
    #     IFS='.' read -r major minor patch <<< "$current_version"
    #     new_minor=$((minor + 1))
    #     new_version="${major}.${new_minor}.${patch}"
    #     mvn versions:set -DnewVersion=$new_version -DgenerateBackupPoms=false
    #     echo "new_version=$new_version" >> $GITHUB_ENV

    # - name: Commit and push changes
    #   run: |
    #     git config --global user.name 'Rambabu'
    #     git config --global user.email 'rajsofdev@gmail.com'
    #     echo "Checking out the code from with branch ${{ github.head_ref }}"
    #     git checkout ${{ github.head_ref }}
    #     echo "adding the pom.xml"
    #     git add pom.xml
    #     version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
    #     echo "The new version is =$version"
    #     echo "Commting the changes"
    #     git commit -m "Increment project version to ${{ env.new_version }}"
    #     echo "Pushing to the branch now ${{ github.head_ref }}"

    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  
    # - name: Extract and increment version
    #   id: versioning
    #   run: |
    #     # Script to increment the version
    #     current_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
    #     IFS='.' read -r major minor patch <<< "$current_version"
    #     new_minor=$((minor + 1))
    #     new_version="${major}.${new_minor}.${patch}"
    #     sed -i "s/<version>${current_version}<\/version>/<version>${new_version}<\/version>/" pom.xml
    #     echo "Updated version from ${current_version} to ${new_version}"
    #     echo "::set-output name=new_version::${new_version}"

    # - name: Commit and push new version
    #   run: |
    #     git config --global user.email "rajsofdev@gmail.com"
    #     git config --global user.name "Rambabu"
    #     git checkout ${{ github.head_ref }}
    #     git add pom.xml
    #     git commit -m "Increment version to ${{ steps.versioning.outputs.new_version }}"
    #     git push origin HEAD:${{ github.head_ref }}
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.PAT }}
