name: Update Version and Build Docker Image on PR to release/QA

on:
  pull_request:
    branches:
      - devops
    types:
      - closed

jobs:
  Create-and-Push-Docker-Image:
    if: github.event.pull_request.base.ref == 'devops'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 18
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '18'

      - name: Determine version bump based on PR title
        id: version_bump
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          current_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          IFS='.' read -r major minor patch <<< "$current_version"

          if [[ "$PR_TITLE" == *feature* ]]; then
            new_minor=$((minor + 1))
            new_version="${major}.${new_minor}.0"
          elif [[ "$PR_TITLE" == *BREAKABLE_CHANGE* ]]; then
            new_major=$((major + 1))
            new_version="${new_major}.0.0"
          else
            echo "No version change required."
            echo "new_version=${current_version}" >> $GITHUB_ENV
            exit 0
          fi

          mvn versions:set -DnewVersion=${new_version} -q
          echo "new_version=${new_version}" >> $GITHUB_ENV
          echo "current version is ${current_version}"
          echo "Version updated to ${new_version}"

      - name: Build Maven project
        if: steps.version_bump.outcome == 'success'
        run: mvn clean install -DskipTests

      # - name: Update VERSION_README.md file
      #   if: steps.version_bump.outcome == 'success'
      #   run: |
      #     COMMIT_ID=$(git rev-parse --short=6 "$GITHUB_SHA")
      #     COMMIT_URL="${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}"
      #     echo -e "\n## Version ${{ env.new_version }}\n" >> VERSION_README.md
      #     echo "*[${COMMIT_ID}](${COMMIT_URL}) - ${PR_TITLE} - $(date +'%Y-%m-%d') by **${{ github.actor }}**" >> VERSION_README.md

      # - name: Commit and push changes
      #   if: steps.version_bump.outcome == 'success'
      #   run: |
      #     git config --global user.email "github-actions[bot]@users.noreply.github.com"
      #     git config --global user.name "github-actions[bot]"
      #     git add pom.xml VERSION_README.md
      #     git commit -m "Bump version to ${{ env.new_version }}"
      #     git push origin HEAD:${{ github.ref }}

      - name: Extract application version and artifactId from pom.xml
        if: steps.version_bump.outcome == 'success'
        run: |
          artifactId=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)
          echo "artifactId=$artifactId" >> $GITHUB_ENV


      # - name: Set up Docker Build
      #   if: steps.version_bump.outcome == 'success'
      #   uses: docker/setup-buildx-action@v2

      # - name: Log in to Azure Container Registry
      #   if: steps.version_bump.outcome == 'success'
      #   run: echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ vars.ACR_NAME }} -u ${{ vars.ACR_USERNAME }} --password-stdin

      # - name: Build and push Docker image
      #   if: steps.version_bump.outcome == 'success'
      #   run: |
      #     docker build -t ${{ vars.ACR_NAME }}/${{ env.artifactId }}:${{ env.new_version }} .
      #     docker push ${{ vars.ACR_NAME }}/${{ env.artifactId }}:${{ env.new_version }}

      # - name: Log out from Azure Container Registry
      #   if: steps.version_bump.outcome == 'success'
      #   run: docker logout ${{ vars.ACR_NAME }}
